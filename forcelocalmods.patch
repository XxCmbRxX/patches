diff --git a/src/pc/configfile.c b/src/pc/configfile.c
index d50bcb06..ae43d812 100644
--- a/src/pc/configfile.c
+++ b/src/pc/configfile.c
@@ -158,6 +158,7 @@ bool         configDebugInfo                     = 0;
 bool         configDebugError                    = 0;
 char         configLanguage[MAX_CONFIG_STRING]   = "";
 bool         configForce4By3                     = false;
+bool         configForceLocalMods                = false;
 char         configCoopNetIp[MAX_CONFIG_STRING]  = DEFAULT_COOPNET_IP;
 unsigned int configCoopNetPort                   = DEFAULT_COOPNET_PORT;
 char         configPassword[MAX_CONFIG_STRING]   = "";
@@ -359,6 +360,7 @@ static const struct ConfigOption options[] = {
     {.name = "touch_snap",               .type = CONFIG_TYPE_BOOL, .boolValue = &configElementSnap},
 #endif
     {.name = "force_4by3",                     .type = CONFIG_TYPE_BOOL,   .boolValue   = &configForce4By3},
+    {.name = "forcelocalmods",                 .type = CONFIG_TYPE_BOOL,   .boolValue   = &configForceLocalMods},
     {.name = "coopnet_ip",                     .type = CONFIG_TYPE_STRING, .stringValue = (char*)&configCoopNetIp, .maxStringLength = MAX_CONFIG_STRING},
     {.name = "coopnet_port",                   .type = CONFIG_TYPE_UINT  , .uintValue   = &configCoopNetPort},
     {.name = "coopnet_password",               .type = CONFIG_TYPE_STRING, .stringValue = (char*)&configPassword, .maxStringLength = MAX_CONFIG_STRING},
diff --git a/src/pc/configfile.h b/src/pc/configfile.h
index 1ee53e25..6df6eb31 100644
--- a/src/pc/configfile.h
+++ b/src/pc/configfile.h
@@ -112,6 +112,7 @@ extern bool         configDebugInfo;
 extern bool         configDebugError;
 extern char         configLanguage[];
 extern bool         configForce4By3;
+extern bool         configForceLocalMods;
 extern char         configCoopNetIp[];
 extern unsigned int configCoopNetPort;
 extern char         configPassword[];
diff --git a/src/pc/djui/djui_panel_join.c b/src/pc/djui/djui_panel_join.c
index 3c2a0732..22e502e3 100644
--- a/src/pc/djui/djui_panel_join.c
+++ b/src/pc/djui/djui_panel_join.c
@@ -24,6 +24,7 @@ void djui_panel_join_create(struct DjuiBase* caller) {
         djui_button_create(body, DLANG(JOIN, PRIVATE_LOBBIES), DJUI_BUTTON_STYLE_NORMAL, djui_panel_join_private_create);
         djui_button_create(body, DLANG(JOIN, DIRECT), DJUI_BUTTON_STYLE_NORMAL, djui_panel_join_direct_create);
         djui_button_create(body, DLANG(MENU, BACK), DJUI_BUTTON_STYLE_BACK, djui_panel_menu_back);
+        djui_checkbox_create(body, "Force Enable Local Mods", &configForceLocalMods, NULL);
     }
 
     djui_panel_add(caller, panel, NULL);
diff --git a/src/pc/mods/mods.c b/src/pc/mods/mods.c
index 9243abda..d1c4a294 100644
--- a/src/pc/mods/mods.c
+++ b/src/pc/mods/mods.c
@@ -127,6 +127,52 @@ void mods_activate(struct Mods* mods) {
     mod_cache_save();
 }
 
+void mods_activate_all(void) {
+    mods_clear(&gActiveMods);
+
+    // count enabled
+    u16 enabledCount = 0;
+    for (int i = 0; i < gRemoteMods.entryCount; i++) {
+        struct Mod* mod = gRemoteMods.entries[i];
+        if (mod->enabled) { enabledCount++; }
+    }
+    for (int i = 0; i < gLocalMods.entryCount; i++) {
+        struct Mod* mod = gLocalMods.entries[i];
+        if (mod->enabled) { enabledCount++; }
+    }
+
+    // allocate
+    gActiveMods.entries = calloc(enabledCount, sizeof(struct Mod*));
+    if (gActiveMods.entries == NULL) {
+        LOG_ERROR("Failed to allocate active mods table!");
+        return;
+    }
+
+    // copy enabled entries
+    gActiveMods.entryCount = 0;
+    gActiveMods.size = 0;
+    for (int i = 0; i < gRemoteMods.entryCount; i++) {
+        struct Mod* mod = gRemoteMods.entries[i];
+        if (mod->enabled) {
+            mod->index = gActiveMods.entryCount;
+            gActiveMods.entries[gActiveMods.entryCount++] = mod;
+            gActiveMods.size += mod->size;
+            mod_activate(mod);
+        }
+    }
+    for (int i = 0; i < gLocalMods.entryCount; i++) {
+        struct Mod* mod = gLocalMods.entries[i];
+        if (mod->enabled) {
+            mod->index = gActiveMods.entryCount;
+            gActiveMods.entries[gActiveMods.entryCount++] = mod;
+            gActiveMods.size += mod->size;
+            mod_activate(mod);
+        }
+    }
+
+    mod_cache_save();
+}
+
 static void mods_sort(struct Mods* mods) {
     if (mods->entryCount <= 1) {
         return;
diff --git a/src/pc/mods/mods.h b/src/pc/mods/mods.h
index 3560e125..a5c077b6 100644
--- a/src/pc/mods/mods.h
+++ b/src/pc/mods/mods.h
@@ -25,6 +25,7 @@ extern char gRemoteModsBasePath[];
 void mods_get_main_mod_name(char* destination, u32 maxSize);
 bool mods_generate_remote_base_path(void);
 void mods_activate(struct Mods* mods);
+void mods_activate_all(void);
 void mods_clear(struct Mods* mods);
 void mods_delete_folder(char* path);
 void mods_refresh_local(void);
diff --git a/src/pc/network/packets/packet_join.c b/src/pc/network/packets/packet_join.c
index 7d4f17d7..915cc9a3 100644
--- a/src/pc/network/packets/packet_join.c
+++ b/src/pc/network/packets/packet_join.c
@@ -182,7 +182,11 @@ void network_receive_join(struct Packet* p) {
 
     fake_lvl_init_from_save_file();
 
-    mods_activate(&gRemoteMods);
+    if (configForceLocalMods) {
+        mods_activate_all();
+    } else {
+        mods_activate(&gRemoteMods);
+    }
     djui_panel_modlist_create(NULL);
     smlua_init();
     dynos_behavior_hook_all_custom_behaviors();
